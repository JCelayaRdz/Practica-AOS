openapi: 3.0.3

info:
  version: 1.0.0
  title: "[Equipo 6] Gesti칩n de clientes"
  description: >
    ## API REST para la gesti칩n de clientes de talleres de mec치nica

servers:
  - url: http://127.0.0.1:80/api/v1
    description: Servidor

tags:
  - name: '游녻 Cliente'
    description: Cliente

paths:
  /clientes:
    get:
      summary: Obtiene todos los clientes de un taller
      description: |
        Los c칩digos de estado HTTP que puede devolver este endpoint son los siguientes
        
        | C칩digo | Descripci칩n | Causa |
        | ------ | ----------- | ----- |
        | **200** | OK | Listado completo de clientes |
        | **404** | NOT FOUND | No existe ning칰n cliente |
      operationId: cliente_cget
      tags: ['游녻 Cliente']
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/pareameters/orderParam'
        - $ref: '#/components/pareameters/orderingParam'
      responses:
        '200':
          description: Lista de clientes del taller
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientes:
                    description: lista de clientes
                    type: array
                    items:
                      $ref: '#/components/schemas/Cliente'


components:
  schemas:
    Cliente:
      title: 'Cliente del taller'
      description: Datos de un cliente de un taller de mec치nica
      type: object
      properties:
        cliente:
          type: object
          # TODO: Revisar required
          required: [id]
          properties:
            id_cliente:
              $ref: '#/components/schemas/Id_Recurso'
            dni:
              $ref: '#/components/schemas/DNI_Cliente'
            nombre:
              type: string
            apellidos:
              type: string
            sexo:
              $ref: '#/components/schemas/Sexo_Cliente'
            edad:
              type: integer
              format: int32
            numero_telefono:
              $ref: '#/components/schemas/Numero_Telefono'
            correo_electronico:
              $ref: '#/components/schemas/Correo_Electronico'
            direccion:
              $ref: '#/components/schemas/Direccion_Cliente'


    Id_Recurso:
      title: 'Identificador de un recurso'
      description:  |
        El identificador de un recurso es un c칩digo hash obtenido mediante el algoritmo SHA 255,
        lo que significa que la longitud del identificador es de 64 caracteres hexadecimales (0-9 y A-F)
      type: string
      pattern: "^[a-fA-F0-9]{64}$"
      example: "2fc5dce0e4395d5c5ca9fa5e47c5d1d23f78c32fca27a6d933db98b7a8e1a6ba"
      x-faker: helpers.regexpStyleStringParse('^[a-fA-F0-9]{64}$')

    DNI_Cliente:
      title: 'Documento nacional de identidad'
      description: |
        Documento personal e intransferible que identifica a los ciudadanos espa침oles
        y a los residentes extranjeros en Espa침a. El DNI consta de 8 d칤gitos (0-9) seguidos
        de una letra may칰scula (A-Z).
      type: string
      pattern: "^[0-9]{8}[A-Z]$"
      example: "12345678A"
      x-faker: helpers.regexpStyleStringParse('^[0-9]{8}[A-Z]$')

    Sexo_Cliente:
      title: 'Sexo de un cliente'
      description: | 
        Enum que representa el sexo de un cliente:
        * `Masculino`
        * `Femenino`
        * `Otro`
      type: string
      enum: ["Masculino", "Femenino", "Otro"]
      x-faker: helpers.arrayElement(['Masculino', 'Femenino', 'Otro'])

    Numero_Telefono:
      title: 'N칰mero de telefono'
      description: | 
        N칰mero de tel칠fono (espa침ol) de un cliente. Este esquema permite
        el formato internacional (+34, 0034 o 34) al principio del n칰mero.
        Un n칰mero de tel칠fono en Espa침a consta de un d칤gito entre 6 y 9 seguido
        de otros 8 d칤gitos.
      type: string
      pattern: "^(\+34|0034|34)?[6-9]\d{8}$"
      example: "+34612345678"
      x-faker: helpers.regexpStyleStringParse('^(\+34|0034|34)?[6-9]\d{8}$')

    Correo_Electronico:
      title: 'Correo electr칩nico'
      description: Correo electr칩nico de un cliente
      type: string
      pattern: "^[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)*$"
      example: "usuario@dominio.com"
      x-faker: helpers.regexpStyleStringParse('^[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)*$')

    Direccion_Cliente:
      title: 'Direcci칩n de un cliente'
      # TODO: Mejorar la descricpion, revisar required
      description: Direcci칩n de un cliente
      type: object
      properties:
        direccion:
          type: object
          required: [id]
          properties:
            id_direccion:
              $ref: '#/components/schemas/Id_Recurso'
            nombre_calle:
              $ref: '#/components/schemas/Nombre_Calle'
            numero_edificion:
              type: integer
              format: int32
              description: Representa el nombre de un portal o de una casa.

    Nombre_Calle:
      title: 'Nombre de una calle'
      description: |
        Este campo representa el nombre de una calle, de tal forma que siempre empiece con la
        abreviatura C/
      type: string
      # TODO: Revisar expresi칩n regular
      pattern: "^C/[a-zA-Z]+"
      example: "C/ Herencia"
      x-faker: helpers.regexpStyleStringParse('^C/[a-zA-Z]+')



  parameters:
    pageParam:
      name: page
      in: query
      description: 'N칰mero de p치gina de clientes'
      required: false
      allowEmptyValue: false
      schema:
        type: integer
        format: int32
        minimum: 1

    orderParam:
      name: order
      in: query
      description: 'Criterio de ordenaci칩n de clientes'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        # TODO: Completar criterios de ordenacion
        enum:
          - id

    orderingParam:
      name: ordering
      in: query
      description: 'Direcci칩n de la ordenaci칩n: `ASC`(ascendente) | `DESC`(descendente)'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - ASC
          - DESC

  headers:
    ETag:
      # TODO: Mejorar la descripci칩n
      description: "Entity Tag"
      schema:
        type: string
        pattern: "[0-9a-f]*"
        example:
          abcdefg123456789
